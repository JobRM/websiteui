#!/usr/bin/groovy

timestamps { 
  podTemplate(
    label: 'jenkins-pipeline', 
    inheritFrom: 'default',
    containers: [
      containerTemplate(name: 'docker', image: 'docker:18.06', command: 'cat', ttyEnabled: true),
      containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:v2.10.0', command: 'cat', ttyEnabled: true),
      containerTemplate(name: 'ng', image: 'alexsuch/angular-cli:6.1.2-chromium', command: 'cat', ttyEnabled: true)
    ]
  ) {
    node ('jenkins-pipeline') {
      stage('Get latest version of code') {
         checkout scm
      }

      stage('NPM Install') {
        container ('ng') {
          sh "npm -v"
          sh "node -v"
          sh "npm install --quiet"
        }        
      }

      stage('Code Formatting checks') {
        container ('ng') {
          sh "ng lint --no-progress"
        }
      }

      stage('Build') {
        container ('ng') {
          sh "ng build --no-progress"
        }
      }

      stage('Run Unit Tests') {
        container ('ng') {
          sh "ng test --single-run --no-progress --browser=HeadlessChrome --code-coverage"
        }

        junit 'test-results/**/*.xml'
      }

      stage('Run Code Coverage') {
        cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/cobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }

      stage('Deploy Local') {
        println "Building docker image"

        // sh "echo \$'FROM nginx:stable-alpine \nCOPY ./dist /usr/share/nginx/html \n' > Dockerfile"

        // container("docker") { sh "docker build -t jobrm:latest ." }

        // container("helm") {
        //   sh "helm init && helm repo update && helm upgrade --install jobrm-static ./charts/jobrm-static --set image.repository=jobrm --set image.tag=latest --set service.type=NodePort" 
        // }
      }

      stage('Run Integration Tests') {
      }

      stage('Deploy Production') {
      }

      stage('Run Post Deployment Tests') {
      }
    } // end node
  } // end podTemplate
} // end timestamps
